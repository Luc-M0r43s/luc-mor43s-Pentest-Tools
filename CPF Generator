#!/usr/bin/env python3
# coding=utf-8

'''
CPF Generator
Author: Lucas M0r43s


New modifications:
Filter CPF's by brazil state because sometimes regional-targeted attacks are better.
'''
import random
import argparse
import sys

write = sys.stderr.write
flush = sys.stderr.flush

parser = argparse.ArgumentParser(description='Generate valid brazilian CPFs')
parser.add_argument('--number', type=int, help='The number of generated CPFs that you want.')
parser.add_argument('--format', action='store_true', help='Format generated CPFs (ex: 602.057.127-03)')
parser.add_argument('--outfile', required=True, help='Output file name to use.')
parser.add_argument("--state", required=False, help="Brazilian state to filter when generating CPFs")


args = parser.parse_args()

def check_cpf_state(state, cpf):
    states = {
        "1":["df","go","ms", "to"],
        "2":["pa", "am", "ac", "ap", "ro", "rr"],
        "3":["ce", "ma", "pi"],
        "4":["pe", "rn", "pb", "al" ],
        "5":["ba", "se"],
        "6":["mg"],
        "7":["rj","es"],
        "8":["sp"],
        "9":["pr", "sc"],
        "0":["rs"]
    }
    state_digit = cpf.replace("-", "").replace(".", "")[8:9]
    for s in states:
        if state_digit == s:
            for each_state in states[state_digit]:
                if each_state == state:
                    return True
    return False

def newCpf():
    cpf = random.randint(10**8, 999999999)  # random cpf
    v1, v2 = 0, 0                           # verification digits

    s_format = args.format # stores True or False

    # creation of reversed CPF
    reversed_cpf = list(str(cpf))
    reversed_cpf.reverse()

    # verification digit 1
    for i in list(range(0,9)):
        v1 += int(reversed_cpf[i]) * (9 - (i % 10))
        v2 += int(reversed_cpf[i]) * (9 -((i + 1) % 10))

    v1 = (v1 % 11) % 10
    v2 += (v1 * 9)
    v2 = (v2 % 11) % 10

    cpf = str(cpf)
    # print of generated CPF
    if s_format:
        return ("{}.{}.{}-{}{}".format(cpf[0:3], cpf[3:6], cpf[6:9], v1, v2)) # True = formatted
    else:
        return ("{}{}{}".format(cpf, v1, v2)) # False = raw

with open(args.outfile, "a+") as f:
    i = 0
    while i < args.number:
        generated_cpf = newCpf()
        
        if args.state is not None:
            # Brazilian state filtering
            while check_cpf_state(args.state, generated_cpf) is False:
                generated_cpf = newCpf()
            f.write(generated_cpf +'\n')
        else:
            f.write(newCpf() + '\n')

        i += 1
        write("[+] CPF's generated: {0}/{1} \r\r".format(i, args.number))
